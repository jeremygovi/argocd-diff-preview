{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Argo CD Diff Preview is a tool that renders the diff between two branches in a Git repository. It is designed to render manifests generated by Argo CD, providing a clear and concise view of the changes between two branches. It operates similarly to Atlantis for Terraform, creating a plan that outlines the proposed changes.</p>"},{"location":"#3-example-pull-requests","title":"3 Example Pull Requests:","text":"<ul> <li>Helm Example | Internal Chart</li> <li>Helm example | External Chart: Nginx</li> <li>Kustomize Example</li> </ul>"},{"location":"#overview_1","title":"Overview","text":"<p>The safest way to make changes to you Helm Charts and Kustomize Overlays in your GitOps repository is to let Argo CD render them for you. This can be done by spinning up an ephemeral cluster in your automated pipelines. Since the diff is rendered by Argo CD itself, it is as accurate as possible.</p> <p>The implementation is actually quite simple. It just follows the steps below:</p>"},{"location":"#10-steps","title":"10 Steps","text":"<ol> <li>Start a local cluster</li> <li>Install Argo CD</li> <li>Add the required credentials (git credentials, image pull secrets, etc.)</li> <li>Fetch all Argo CD applications from your PR branch</li> <li>Point their <code>targetRevision</code> to the Pull Request branch</li> <li>Remove the <code>syncPolicy</code> from the applications (to avoid the applications syncing locally)</li> <li>Apply the modified applications to the cluster</li> <li>Let Argo CD do its magic</li> <li>Extract the rendered manifests from the Argo CD server</li> <li>Repeat steps 4\u20137 for the base branch (main branch)</li> <li>Create a diff between the manifests rendered from each branch</li> <li>Display the diff in the PR</li> </ol>"},{"location":"#features","title":"Features","text":"<ul> <li>Renders manifests generated by Argo CD</li> <li>Does not require access to your real cluster or Argo CD instance. The tool runs in complete isolation.</li> <li>Can be run locally before you open the pull request</li> <li>Works with private repositories and Helm charts</li> <li>Provides a clear and concise view of the changes</li> <li>Render resources from external sources (e.g., Helm charts). For example, when you update the chart version of Nginx, you can get a render of the new output. For example, this is useful to spot changes in default values. PR example. </li> </ul>"},{"location":"#why-do-we-need-this","title":"Why do we need this?","text":"<p>In the Kubernetes world, we often use templating tools like Kustomize and Helm to generate our Kubernetes manifests. These tools make maintaining and streamlining configuration easier across applications and environments. However, they also make it harder to visualize the application's actual configuration in the cluster.</p> <p>Mentally parsing Helm templates and Kustomize patches is hard without rendering the actual output. Thus, making mistakes while modifying an application's configuration is relatively easy.</p> <p>In the field of GitOps and infrastructure as code, all configurations are checked into Git and modified through PRs. The code changes in the PR are reviewed by a human, who needs to understand the changes made to the configuration. This is hard when the configuration is generated through templating tools like Kustomize and Helm.</p>"},{"location":"#argocon-2024-talk","title":"ArgoCon 2024 Talk","text":"<p> <code>argocd-diff-preview</code> will be presented at ArgoCon 2024 in Utah, US. The talk will cover the current tools and methods for visualizing code changes in GitOps workflows and introduce this new approach, which uses ephemeral clusters to render accurate diffs directly on your pull requests.</p> <ul> <li>GitOps Safety: Rendering Accurate ArgoCD Diffs Directly on Pull Requests</li> </ul>"},{"location":"application-selection/","title":"Application Selection","text":"<p>Rendering the manifests generated by all applications in the repository on each pull request can be slow. Limiting the number of applications rendered can speed up the rendering process significantly. By default, <code>argocd-diff-preview</code> will render all applications in the repository.</p> <p>Here are three ways to limit which applications are rendered:</p>"},{"location":"application-selection/#label-selectors","title":"Label Selectors","text":"<p>Run the tool with the <code>--selector</code> option to filter applications based on labels. The option supports <code>=</code>, <code>==</code>, and <code>!=</code>.</p> <p>Example: <pre><code>argocd-diff-preview --selector \"team=a\"\n</code></pre> This command :arrow_up: will target the following application :arrow_down: and ignore all applications that do not have the label <code>team: a</code>.</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app\n  labels:\n    team: a\nspec:\n  ...\n</code></pre>"},{"location":"application-selection/#annotations","title":"Annotations","text":"<p>You can exclude specific applications from rendering by adding the annotation <code>argocd-diff-preview/ignore: \"true\"</code> to their manifest. This is useful for skipping applications that don\u2019t require a diff.</p> <p>Example: <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app\n  annotations:\n    argocd-diff-preview/ignore: \"true\"\nspec:\n  ...\n</code></pre></p>"},{"location":"application-selection/#file-regex","title":"File Regex","text":"<p>Alternatively, use the <code>--file-regex</code> option to limit rendering to manifests whose file paths match a regular expression. This is helpful when rendering changes from specific teams or directories.</p> <p>Example:</p> <p>If someone in your organization from Team A changes to one of their applications, the tool can be run with: <pre><code>argocd-diff-preview --file-regex=\"/Team-A/\"\n</code></pre> This ensures only applications in folders matching <code>*/Team-A/*</code> are rendered.</p>"},{"location":"custom-argo-cd-installation/","title":"Custom Argo CD Installation","text":"<p>Argo CD is installed using a Helm Chart. You can specify the Chart version with the <code>--argocd-chart-version</code> option. It defaults to the latest version.</p> <p>You can modify the Argo CD Helm Chart installation by providing the tool with a <code>values.yaml</code> file and mounting it in the <code>argocd-config</code> folder within the container. Check out all the available values in the Argo CD Helm Chart.</p> <p>Example:</p> <p>Here we set <code>configs.cm.\"kustomize.buildOptions\"</code> in the Chart.</p> .github/workflows/generate-diff.yml<pre><code>jobs:\n  build:\n    ...\n    steps:\n      ...\n    - name: Set ArgoCD Custom Values\n      run: |\n        cat &gt; values.yaml &lt;&lt; \"EOF\"\n        # set whatever helm values you want\n        configs:\n          cm:\n            kustomize.buildOptions: --load-restrictor LoadRestrictionsNone --enable-helm\n        EOF\n\n    - name: Generate Diff\n      run: |\n        docker run \\\n          --network=host \\\n          -v /var/run/docker.sock:/var/run/docker.sock \\\n          -v $(pwd)/main:/base-branch \\\n          -v $(pwd)/pull-request:/target-branch \\\n          -v $(pwd)/values.yaml:/argocd-config/values.yaml \\   \u2b05\ufe0f Mount values.yaml\n          ...\n</code></pre>"},{"location":"custom-argo-cd-installation/#argo-cd-config-management-plugins-cmp","title":"Argo CD Config Management Plugins (CMP)","text":"<p>You can install any Argo CD Config Management Plugin that is supported through the Argo CD Helm Chart. However, there is no guarantee that the plugin will work with the tool, as this depends on the plugin and its specific implementation</p> <p>Questions, issues, or suggestions</p> <p>If you experience issues or have any questions, please open an issue in the repository! \ud83d\ude80</p>"},{"location":"demo/","title":"Try demo locally with 3 simple commands!","text":"<p>First, make sure Docker is running. Run <code>docker ps</code> to check if it's running.</p> <p>Second, run the following 3 commands:</p> <pre><code>git clone https://github.com/dag-andersen/argocd-diff-preview base-branch --depth 1 -q\n\ngit clone https://github.com/dag-andersen/argocd-diff-preview target-branch --depth 1 -q -b helm-example-3\n\ndocker run \\\n   --network host \\\n   -v /var/run/docker.sock:/var/run/docker.sock \\\n   -v $(pwd)/output:/output \\\n   -v $(pwd)/base-branch:/base-branch \\\n   -v $(pwd)/target-branch:/target-branch \\\n   -e TARGET_BRANCH=helm-example-3 \\\n   -e REPO=dag-andersen/argocd-diff-preview \\\n   jeremygovi/argocd-diff-preview:v0.0.19\n</code></pre> <p>and the output would be something like this:</p> <pre><code>\u2728 Running with:\n\u2728 - local-cluster-tool: Kind\n\u2728 - base-branch: main\n\u2728 - target-branch: helm-example-3\n\u2728 - secrets-folder: ./secrets\n\u2728 - output-folder: ./output\n\u2728 - repo: dag-andersen/argocd-diff-preview\n\u2728 - timeout: 180 seconds\n\ud83d\ude80 Creating cluster...\n\ud83d\ude80 Cluster created successfully\n\ud83e\udd91 Installing Argo CD Helm Chart version: 'latest'\n\ud83e\udd91 Installing Argo CD Helm Chart\n\ud83e\udd91 Waiting for Argo CD to start...\n\ud83e\udd91 Argo CD is now available\n\ud83e\udd91 Logging in to Argo CD through CLI...\n\ud83e\udd91 Argo CD installed successfully\n\ud83e\udd37 No secrets found in ./secrets\n\ud83e\udd16 Fetching all files in dir: base-branch\n\ud83e\udd16 Patching applications for branch: main\n\ud83e\udd16 Patching 4 Argo CD Application[Sets] for branch: main\n\ud83e\udd16 Fetching all files in dir: target-branch\n\ud83e\udd16 Patching applications for branch: helm-example-3\n\ud83e\udd16 Patching 4 Argo CD Application[Sets] for branch: helm-example-3\n\ud83c\udf1a Getting resources from base\n\u23f3 Waiting for 4 out of 4 applications to become 'OutOfSync'. Retrying in 5 seconds. Timeout in 180 seconds...\n\ud83c\udf1a Got all resources from 4 applications for base\n\ud83e\uddfc Removing applications\n\ud83e\uddfc Removed applications successfully\n\ud83c\udf1a Getting resources from target\n\u23f3 Waiting for 3 out of 4 applications to become 'OutOfSync'. Retrying in 5 seconds. Timeout in 180 seconds...\n\ud83c\udf1a Got all resources from 4 applications for target\n\ud83d\udca5 Deleting cluster...\n\ud83d\udd2e Generating diff between main and helm-example-3\n\ud83d\ude4f Please check the ./output/diff.md file for differences\n\ud83c\udf89 Done in 99 seconds\n</code></pre> <p>Finally, you can view the diff by running <code>cat ./output/diff.md</code>. The diff should look something like this</p> <p>Questions, issues, or suggestions</p> <p>If you experience issues or have any questions, please open an issue in the repository! \ud83d\ude80</p>"},{"location":"generated-applications/","title":"Helm/Kustomize generated ArgoCD applications","text":"<p><code>argocd-diff-preview</code> will only look for YAML files in the repository with <code>kind: Application</code> or <code>kind: ApplicationSet</code>. If your applications are generated from a Helm chart or Kustomize template, you will have to add a step in the pipeline that renders the chart/template.</p> <p>Helm and Kustomize examples:</p> <p>.github/workflows/generate-diff.yml<pre><code>jobs:\n  build:\n    ...\n    steps:\n      ...\n    - uses: actions/checkout@v4\n      with:\n        path: pull-request\n\n    - name: Generate with helm chart\n      run: helm template pull-request/some/path/my-chart &gt; pull-request/rendered-apps.yaml\n\n    - name: Generate with kustomize\n      run: kustomize build pull-request/some/path/my-kustomize &gt; pull-request/rendered-apps.yaml\n\n    - name: Generate Diff\n      run: |\n        docker run \\\n          --network=host \\\n          -v /var/run/docker.sock:/var/run/docker.sock \\\n          -v $(pwd)/main:/base-branch \\\n          ...\n</code></pre> This will place the rendered manifests inside the <code>pull-request</code> folder, and the tool will pick them up.</p>"},{"location":"github-actions-workflow/","title":"GitHub Actions Workflow","text":""},{"location":"github-actions-workflow/#public-repositories","title":"Public repositories","text":"<p>If your repository is public and only uses public Helm charts, you can use the following GitHub Actions workflow to generate a diff between the main branch and the pull request branch. The diff will then be posted as a comment on the pull request.</p> .github/workflows/generate-diff.yml<pre><code>name: Argo CD Diff Preview\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          path: pull-request\n\n      - uses: actions/checkout@v4\n        with:\n          ref: main\n          path: main\n\n      - name: Generate Diff\n        run: |\n          docker run \\\n            --network=host \\\n            -v /var/run/docker.sock:/var/run/docker.sock \\\n            -v $(pwd)/main:/base-branch \\\n            -v $(pwd)/pull-request:/target-branch \\\n            -v $(pwd)/output:/output \\\n            -e TARGET_BRANCH=${{ github.head_ref }} \\\n            -e REPO=${{ github.repository }} \\\n            jeremygovi/argocd-diff-preview:v0.0.19\n\n      - name: Post diff as comment\n        run: |\n          gh pr comment ${{ github.event.number }} --repo ${{ github.repository }} --body-file output/diff.md --edit-last || \\\n          gh pr comment ${{ github.event.number }} --repo ${{ github.repository }} --body-file output/diff.md\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"github-actions-workflow/#private-repositories-and-helm-charts","title":"Private repositories and Helm Charts","text":"<p>In the simple code examples above, we do not provide the cluster with any credentials, which only works if the image/Helm Chart registry and the Git repository are public. Since your repository might not be public you need to provide the tool with the necessary read-access credentials for the repository. This can be done by placing the Argo CD repo secrets in folder mounted at <code>/secrets</code>. When the tool starts, it will simply run <code>kubectl apply -f /secrets</code> to apply every resource to the cluster, before starting the rendering process.</p> .github/workflows/generate-diff.yml<pre><code>---\n- uses: actions/checkout@v4\n  with:\n    ref: main\n    path: main\n\n- name: Prepare secrets\n  run: |\n    mkdir secrets\n    cat &gt; secrets/secret.yaml &lt;&lt; \"EOF\"\n    apiVersion: v1\n    kind: Secret\n    metadata:\n      name: private-repo\n      namespace: argocd\n      labels:\n        argocd.argoproj.io/secret-type: repo-creds\n    stringData:\n      url: https://github.com/${{ github.repository }}\n      password: ${{ secrets.GITHUB_TOKEN }}  \u2b05\ufe0f Short-lived GitHub Token\n      username: not-used\n    EOF\n\n- name: Generate Diff\n  run: |\n    docker run \\\n      --network=host \\\n      -v /var/run/docker.sock:/var/run/docker.sock \\\n      -v $(pwd)/main:/base-branch \\\n      -v $(pwd)/pull-request:/target-branch \\\n      -v $(pwd)/output:/output \\\n      -v $(pwd)/secrets:/secrets \\           \u2b05\ufe0f Mount the secrets folder\n      -e TARGET_BRANCH=${{ github.head_ref }} \\\n      -e REPO=${{ github.repository }} \\\n      jeremygovi/argocd-diff-preview:v0.0.19\n</code></pre> <p>For more info, see the Argo CD docs</p>"},{"location":"ignoring-lines/","title":"Ignore specific lines in the diff preview","text":"<p>Since this tool only highlights diffs between branches, it is important to stay up to date with your main branch. If your main branch is updated often with new tags for you container images, it can be hard to keep up with the newest changes.</p> <p>You might see a lot of previews including simple changes like <code>image: my-image:v1.0.0</code> to <code>image: my-image:v1.0.1</code>.</p> <p>Example:</p> <pre><code>diff --git base/deployment target/deployment\n@@ -3,38 +3,38 @@ template:\n    spec:\n      containers:\n        - name: my-app\n-         image: dag-andersen/my-app:v1.0.1\n+         image: dag-andersen/my-app:v1.0.2\n          ports:\n            - containerPort: 80\n</code></pre> <p>To avoid this, you can ignore lines in the diff by using the <code>--diff-ignore</code> option.</p> <pre><code>argocd-diff-preview --diff-ignore=\"v[1,9]+.[1,9]+.[1,9]+\"\n</code></pre> <p>This will ignore changes like in the example above.</p> <p><code>argocd-diff-preview</code> uses <code>git diff</code> for generating the diff. For more information on how the lines are ignored, read their docs: git-diff.</p>"},{"location":"installation/","title":"Running it locally","text":"DockerBinarySource"},{"location":"installation/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Install: Docker</li> </ul>"},{"location":"installation/#usage","title":"Usage","text":"<p>You need to pull down the two branches you want to compare. The first branch will be cloned into the <code>base-branch</code> folder, and the other branch will be cloned into the <code>target-branch</code> folder.</p> <pre><code>git clone https://github.com/&lt;owner&gt;/&lt;repo&gt; base-branch --depth 1 -q -b &lt;branch-a&gt;\n\ngit clone https://github.com/&lt;owner&gt;/&lt;repo&gt; target-branch --depth 1 -q -b &lt;branch-b&gt;\n</code></pre> <p>Then you can run the tool using the following command:</p> <pre><code>docker run \\\n  --network host \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v $(pwd)/output:/output \\\n  -v $(pwd)/base-branch:/base-branch \\\n  -v $(pwd)/target-branch:/target-branch \\\n  -e TARGET_BRANCH=&lt;branch-a&gt; \\\n  -e BASE_BRANCH=&lt;branch-b&gt; \\\n  -e REPO=&lt;owner&gt;/&lt;repo&gt;  \\\n  jeremygovi/argocd-diff-preview:v0.0.19\n</code></pre> <p>If base-branch(<code>BASE_BRANCH</code>) is not specified it will default to <code>main</code>.</p>"},{"location":"installation/#pre-requisites_1","title":"Pre-requisites:","text":"<p>Install:</p> <ul> <li>Git</li> <li>Docker</li> <li>kubectl</li> <li>kind OR minikube</li> <li>Argo CD CLI</li> </ul>"},{"location":"installation/#find-the-correct-binary-for-your-operating-system","title":"Find the correct binary for your operating system","text":"<p>Check the releases and find the correct binary for your operating system.</p> <p>Example for downloading and running on macOS:</p> <pre><code>curl -LJO https://github.com/dag-andersen/argocd-diff-preview/releases/download/v0.0.19/argocd-diff-preview-Darwin-x86_64.tar.gz\ntar -xvf argocd-diff-preview-Darwin-x86_64.tar.gz\nsudo mv argocd-diff-preview /usr/local/bin\nargocd-diff-preview --help\n</code></pre>"},{"location":"installation/#usage_1","title":"Usage","text":"<p>You need to pull down the two branches you want to compare. The first branch will be cloned into the <code>base-branch</code> folder, and the other branch will be cloned into the <code>target-branch</code> folder.</p> <pre><code>git clone https://github.com/&lt;owner&gt;/&lt;repo&gt; base-branch --depth 1 -q -b &lt;branch-a&gt;\n\ngit clone https://github.com/&lt;owner&gt;/&lt;repo&gt; target-branch --depth 1 -q -b &lt;branch-b&gt;\n</code></pre>"},{"location":"installation/#run-the-binary","title":"Run the binary","text":"<pre><code>argocd-diff-preview \\\n  --repo &lt;owner&gt;/&lt;repo-name&gt; \\\n  --base-branch &lt;branch-a&gt; \\\n  --target-branch &lt;branch-b&gt;\n</code></pre> <p>If base-branch is not specified it will default to <code>main</code>.</p>"},{"location":"installation/#pre-requisites_2","title":"Pre-requisites:","text":"<p>Install:</p> <ul> <li>Git</li> <li>Docker</li> <li>kubectl</li> <li>kind OR minikube</li> <li>Argo CD CLI</li> <li>Rust</li> </ul>"},{"location":"installation/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/dag-andersen/argocd-diff-preview\ncd argocd-diff-preview\ncargo run -- --help\n</code></pre>"},{"location":"installation/#usage_2","title":"Usage","text":"<p>You need to pull down the two branches you want to compare. The first branch will be cloned into the <code>base-branch</code> folder, and the other branch will be cloned into the <code>target-branch</code> folder.</p> <pre><code>git clone https://github.com/&lt;owner&gt;/&lt;repo&gt; base-branch --depth 1 -q -b &lt;branch-a&gt;\n\ngit clone https://github.com/&lt;owner&gt;/&lt;repo&gt; target-branch --depth 1 -q -b &lt;branch-b&gt;\n</code></pre>"},{"location":"installation/#run-the-code","title":"Run the code","text":"<pre><code>cargo run -- \\\n  --repo &lt;owner&gt;/&lt;repo-name&gt; \\\n  --base-branch &lt;branch-a&gt; \\\n  --target-branch &lt;branch-b&gt;\n</code></pre> <p>If base-branch is not specified it will default to <code>main</code>.</p>"},{"location":"options/","title":"Options","text":"<pre><code>USAGE:\n    argocd-diff-preview [FLAGS] [OPTIONS] --repo &lt;repo&gt; --target-branch &lt;target-branch&gt;\n\nFLAGS:\n    -d, --debug      Activate debug mode\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n        --argocd-chart-version &lt;version&gt;\n                Argo CD Helm Chart version \n                [env: ARGOCD_CHART_VERSION=]\n\n    -b, --base-branch &lt;base-branch&gt;\n                Base branch name\n                [env: BASE_BRANCH=]  [default: main]\n\n        --base-branch-folder &lt;folder&gt;\n                Base branch folder \n                [env: BASE_BRANCH_FOLDER=]  [default: base-branch]\n\n    -i, --diff-ignore &lt;diff-ignore&gt;\n                Ignore lines in diff. Example: use 'v[1,9]+.[1,9]+.[1,9]+' \n                for ignoring changes caused by version changes following semver \n                [env: DIFF_IGNORE=]\n\n    -r, --file-regex &lt;file-regex&gt;\n                Regex to filter files. Example: \"/apps_.*\\.yaml\" \n                [env: FILE_REGEX=]\n\n    -c, --line-count &lt;line-count&gt;\n                Generate diffs with &lt;n&gt; lines above and below the highlighted \n                changes in the diff. \n                [env: LINE_COUNT=]  [Default: 10]\n\n        --local-cluster-tool &lt;tool&gt;\n                Local cluster tool. Options: kind, minikube\n                [env: LOCAL_CLUSTER_TOOL=] [default: auto]\n\n        --max-diff-length &lt;length&gt;\n                Max diff message character count.\n                [env: MAX_DIFF_LENGTH=]  [Default: 65536] (GitHub comment limit)\n\n    -o, --output-folder &lt;output-folder&gt;\n                Output folder where the diff will be saved \n                [env: OUTPUT_FOLDER=]  [default: ./output]\n\n        --repo &lt;repo&gt;\n                Git Repository. Format: OWNER/REPO \n                [env: REPO=]\n\n    -s, --secrets-folder &lt;secrets-folder&gt;\n                Secrets folder where the secrets are read from \n                [env: SECRETS_FOLDER=]  [default: ./secrets]\n\n    -l, --selector &lt;selector&gt;\n                Label selector to filter on. \n                Supports '=', '==', and '!='. (e.g. -l key1=value1,key2=value2) \n                [env: SELECTOR=]\n\n    -t, --target-branch &lt;target-branch&gt;\n                Target branch name \n                [env: TARGET_BRANCH=]\n\n        --target-branch-folder &lt;folder&gt;\n                Target branch folder \n                [env: TARGET_BRANCH_FOLDER=]  [default: target-branch]\n\n        --timeout &lt;timeout&gt;\n                Set timeout for waiting for Applications to become 'OutOfSync' \n                [env: TIMEOUT=]  [default: 180]\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#debug-mode","title":"Debug Mode","text":"<p>If you are having trouble with the tool, you can enable debug mode to get more information about what is going wrong. To enable debug mode run the tool with the <code>--debug</code> flag.</p> <p>If that doesn't help or you still have questions, please open an issue in the repository! </p>"}]}